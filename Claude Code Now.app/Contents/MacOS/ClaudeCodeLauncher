#!/bin/bash

# 🖥 Claude Code Now - Launch instantly without confirmation
# Get the path parameter if provided
TARGET_DIR="$1"

# Set complete PATH including common Node.js and CLI tool paths
# First, try to source common shell configurations to get the proper PATH
if [ -f "$HOME/.zshrc" ]; then
    source "$HOME/.zshrc" 2>/dev/null || true
elif [ -f "$HOME/.bashrc" ]; then
    source "$HOME/.bashrc" 2>/dev/null || true
elif [ -f "$HOME/.bash_profile" ]; then
    source "$HOME/.bash_profile" 2>/dev/null || true
fi

# Detect and add nvm Node.js path dynamically
NVM_NODE_PATH=""
if [ -d "$HOME/.nvm" ]; then
    # Try to load nvm
    export NVM_DIR="$HOME/.nvm"
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" 2>/dev/null || true
    [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion" 2>/dev/null || true

    # Try to get current/default Node.js version
    if command -v nvm >/dev/null 2>&1; then
        # Get current node version or default version
        CURRENT_NODE_VERSION=$(nvm current 2>/dev/null | grep -v 'none' | head -1 || nvm alias default 2>/dev/null | grep -v 'default -> N/A' | head -1 || "")
        if [ -n "$CURRENT_NODE_VERSION" ] && [ "$CURRENT_NODE_VERSION" != "none" ] && [ "$CURRENT_NODE_VERSION" != "system" ]; then
            NVM_NODE_PATH="$HOME/.nvm/versions/node/$CURRENT_NODE_VERSION/bin"
        else
            # Fallback: find the latest installed version
            LATEST_NODE_VERSION=$(ls "$HOME/.nvm/versions/node/" 2>/dev/null | sort -V | tail -1 || echo "")
            if [ -n "$LATEST_NODE_VERSION" ]; then
                NVM_NODE_PATH="$HOME/.nvm/versions/node/$LATEST_NODE_VERSION/bin"
            fi
        fi
    else
        # Fallback: find the latest installed version without nvm command
        LATEST_NODE_VERSION=$(ls "$HOME/.nvm/versions/node/" 2>/dev/null | sort -V | tail -1 || echo "")
        if [ -n "$LATEST_NODE_VERSION" ]; then
            NVM_NODE_PATH="$HOME/.nvm/versions/node/$LATEST_NODE_VERSION/bin"
        fi
    fi
fi

# Add common paths that might not be in the shell config
if [ -n "$NVM_NODE_PATH" ]; then
    export PATH="$NVM_NODE_PATH:$HOME/.npm-global/bin:$HOME/.npm/bin:$HOME/Library/pnpm:$HOME/.local/bin:$HOME/.cargo/bin:/usr/local/bin:/opt/homebrew/bin:/usr/local/share/npm/bin:$PATH"
else
    export PATH="$HOME/.npm-global/bin:$HOME/.npm/bin:$HOME/Library/pnpm:$HOME/.local/bin:$HOME/.cargo/bin:/usr/local/bin:/opt/homebrew/bin:/usr/local/share/npm/bin:$PATH"
fi

# 保存上次目录的配置文件
LAST_DIR_FILE="$HOME/.claude-code-now-last-dir"

# If no parameter provided, try to get current Finder path
if [ -z "$TARGET_DIR" ]; then
    # Use AppleScript to get current Finder path
    TARGET_DIR=$(osascript -e '
        tell application "Finder"
            try
                set currentPath to POSIX path of (target of front window as alias)
            on error
                set currentPath to ""
            end try
        end tell
    ')
fi

# If still no Finder path, try to use last saved directory
if [ -z "$TARGET_DIR" ] && [ -f "$LAST_DIR_FILE" ]; then
    TARGET_DIR=$(cat "$LAST_DIR_FILE")
fi

# If still no path, use user home directory
if [ -z "$TARGET_DIR" ]; then
    TARGET_DIR="$HOME"
fi

# Check if directory exists
if [ ! -d "$TARGET_DIR" ]; then
    osascript -e "display alert \"Error\" message \"Directory '$TARGET_DIR' does not exist\""
    exit 1
fi

# Check if Claude Code is installed
# Try to find claude command in common locations
CLAUDE_PATH=""
if command -v claude >/dev/null 2>&1; then
    CLAUDE_PATH=$(command -v claude)
else
    # Try common installation locations
    for path in "$HOME/Library/pnpm/claude" "$HOME/.npm-global/bin/claude" "$HOME/.npm/bin/claude" "$HOME/.local/bin/claude" "/usr/local/bin/claude" "/opt/homebrew/bin/claude"; do
        if [ -f "$path" ] && [ -x "$path" ]; then
            CLAUDE_PATH="$path"
            break
        fi
    done
fi

if [ -z "$CLAUDE_PATH" ]; then
    osascript -e "display alert \"Claude Code Not Installed\" message \"Please check if Claude Code CLI is properly installed.

Try running: npm install -g claude

Or check the path with: command -v claude\""
    exit 1
fi

# 保存当前目录，供下次使用
echo "$TARGET_DIR" > "$LAST_DIR_FILE"

# Launch iTerm (preferred) or Terminal and run Claude Code in specified directory
if [ -d "/Applications/iTerm.app" ] || [ -d "/Applications/iTerm 2.app" ]; then
    # Use iTerm if available
    if [ -d "/Applications/iTerm 2.app" ]; then
        ITERM_APP="iTerm 2"
    else
        ITERM_APP="iTerm"
    fi

    osascript <<EOF
tell application "$ITERM_APP"
    activate
    create window with default profile
    tell current session of current window
        write text "cd " & quoted form of "$TARGET_DIR" & " && claude --permission-mode bypassPermissions"
    end tell
end tell
EOF
else
    # Fallback to Terminal
    osascript <<EOF
tell application "Terminal"
    activate
    do script "cd " & quoted form of "$TARGET_DIR" & " && claude --permission-mode bypassPermissions"
end tell
EOF
fi